// This file is auto-generated by @hey-api/openapi-ts

import { type Client, type Options as Options2, type TDataShape, urlSearchParamsBodySerializer } from './client';
import { client } from './client.gen';
import type { HealthHealthGetData, HealthHealthGetResponses, LoginForAccessTokenTokenPostData, LoginForAccessTokenTokenPostErrors, LoginForAccessTokenTokenPostResponses, ServeSpaFullPathGetData, ServeSpaFullPathGetErrors, ServeSpaFullPathGetResponses, ViewAApiANumGetData, ViewAApiANumGetErrors, ViewAApiANumGetResponses, ViewBApiBNumGetData, ViewBApiBNumGetErrors, ViewBApiBNumGetResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export class Default {
    /**
     * Login For Access Token
     */
    public static loginForAccessTokenTokenPost<ThrowOnError extends boolean = false>(options: Options<LoginForAccessTokenTokenPostData, ThrowOnError>) {
        return (options.client ?? client).post<LoginForAccessTokenTokenPostResponses, LoginForAccessTokenTokenPostErrors, ThrowOnError>({
            ...urlSearchParamsBodySerializer,
            url: '/token',
            ...options,
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
                ...options.headers
            }
        });
    }
    
    /**
     * Health
     */
    public static healthHealthGet<ThrowOnError extends boolean = false>(options?: Options<HealthHealthGetData, ThrowOnError>) {
        return (options?.client ?? client).get<HealthHealthGetResponses, unknown, ThrowOnError>({
            url: '/health',
            ...options
        });
    }
    
    /**
     * Serve Spa
     * Serve index.html for all unmatched routes (SPA routing).
     */
    public static serveSpaFullPathGet<ThrowOnError extends boolean = false>(options: Options<ServeSpaFullPathGetData, ThrowOnError>) {
        return (options.client ?? client).get<ServeSpaFullPathGetResponses, ServeSpaFullPathGetErrors, ThrowOnError>({
            url: '/{full_path}',
            ...options
        });
    }
}

export class ApiA {
    /**
     * View A
     */
    public static viewAApiANumGet<ThrowOnError extends boolean = false>(options: Options<ViewAApiANumGetData, ThrowOnError>) {
        return (options.client ?? client).get<ViewAApiANumGetResponses, ViewAApiANumGetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api_a/{num}',
            ...options
        });
    }
}

export class ApiB {
    /**
     * View B
     */
    public static viewBApiBNumGet<ThrowOnError extends boolean = false>(options: Options<ViewBApiBNumGetData, ThrowOnError>) {
        return (options.client ?? client).get<ViewBApiBNumGetResponses, ViewBApiBNumGetErrors, ThrowOnError>({
            security: [
                {
                    scheme: 'bearer',
                    type: 'http'
                }
            ],
            url: '/api_b/{num}',
            ...options
        });
    }
}
