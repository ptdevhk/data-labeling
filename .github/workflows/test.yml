
name: Run unit tests

on:
  pull_request:
    branches:
      - main

  schedule:
    # Every sunday at 8:05 UTC
    - cron: "5 8 * * 0"

# If you trigger a new workflow while the previous one is running,
# this will cancel the previous one (but not on main branch to avoid canceling tests).
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  run-tests:
    runs-on: ${{ matrix.os }}
    strategy:
      # Use matrix strategy to run the tests on multiple Py versions on multiple OSs.
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.13"]

    steps:
      - uses: actions/checkout@v5
      
      # Check if backend files changed
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            backend:
              - 'svc/**'
              - 'pyproject.toml'
              - 'uv.lock'
              - '.github/workflows/test.yml'
              - 'makefile'
      
      # Skip if only frontend changed
      - name: Skip tests for frontend-only changes
        if: steps.filter.outputs.backend != 'true'
        run: echo "Only frontend files changed, skipping backend tests"
      
      - uses: actions/setup-python@v6
        if: steps.filter.outputs.backend == 'true'
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        if: steps.filter.outputs.backend == 'true'
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"

      - name: Setup environment file
        if: steps.filter.outputs.backend == 'true'
        run: |
          echo "Copying .env.example to .env..."
          cp .env.example .env

      - name: Install the Dependencies
        if: steps.filter.outputs.backend == 'true'
        run: |
          echo "Installing the dependencies..."
          uv sync

      - name: Check Linter
        if: steps.filter.outputs.backend == 'true'
        run: |
          echo "Checking linter formatting..."
          make lint-check

      - name: Run Tests
        if: steps.filter.outputs.backend == 'true'
        run: |
          echo "Running the tests..."
          make test
