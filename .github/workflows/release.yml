name: Release

on:
  push:
    branches:
      - main
      - develop

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  # Run Python tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - uses: actions/setup-python@v6
        with:
          python-version: '3.13'
          
      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
          
      - name: Setup environment
        run: cp .env.example .env
        
      - name: Install dependencies
        run: uv sync
        
      - name: Run linter
        run: make lint-check
        
      - name: Run tests
        run: make test

  # Run Frontend tests  
  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - uses: actions/setup-node@v6
        with:
          node-version: '20'
          
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Install dependencies
        working-directory: ./web
        run: bun install
        
      - name: Run linter
        run: make lint-react
        
      - name: Build
        working-directory: ./web
        run: bun run build

  # Run Docker build test
  test-docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Setup environment
        run: cp .env.example .env
        
      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest
          
      - name: Build frontend
        run: |
          cd web
          bun install
          bun run build
          
      - name: Test Docker containers
        run: |
          docker compose -f docker-compose.yml up -d
          sleep 5
          curl http://localhost:5002 || (docker compose logs && exit 1)
          docker compose down
          
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, test-docker]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          persist-credentials: false  # Disable GITHUB_TOKEN to use PAT instead
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v6
        with:
          node-version: 'lts/*'

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: latest

      - name: Install Python
        uses: actions/setup-python@v6
        with:
          python-version: '3.13'

      - name: Install uv
        uses: astral-sh/setup-uv@v7
        with:
          version: "latest"
          enable-cache: true

      - name: Install semantic-release dependencies
        run: |
          rm -rf node_modules package-lock.json
          npm install --no-save \
            semantic-release@^24.0.0 \
            @semantic-release/changelog@^6.0.3 \
            @semantic-release/commit-analyzer@^13.0.0 \
            @semantic-release/release-notes-generator@^14.0.0 \
            @semantic-release/git@^10.0.1 \
            @semantic-release/github@^11.0.0 \
            @semantic-release/exec@^6.0.3 \
            conventional-changelog-conventionalcommits@^8.0.0

      - name: Verify VERSION file
        run: |
          if [ ! -f VERSION ]; then
            echo "0.0.0" > VERSION
            echo "Created initial VERSION file"
          fi
          echo "Current VERSION file content:"
          cat VERSION
          
          echo ""
          echo "Git configuration:"
          git config --list | grep -E "(user|email)" || echo "No git config found"

      - name: Run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}  # Use PAT instead of GITHUB_TOKEN
          GIT_AUTHOR_NAME: github-actions[bot]
          GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
          GIT_COMMITTER_NAME: github-actions[bot]
          GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
        run: |
          echo "Running semantic-release with PAT..."
          echo "Git user: $(git config user.name || echo 'not set')"
          echo "Git email: $(git config user.email || echo 'not set')"
          npx semantic-release

      - name: Read new version
        id: version
        run: |
          VERSION=$(cat VERSION)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Released version: $VERSION"

    outputs:
      version: ${{ steps.version.outputs.version }}
